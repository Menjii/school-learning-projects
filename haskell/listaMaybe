--ZADANIE SKOÅƒCZONE/POPRAWIONE

import Control.Applicative

justProduct :: [Maybe Int] -> Maybe Int
justProduct [] = Just 1
justProduct (item : items) = (*) <$> item <*> (justProduct items)

justProduct' :: [Maybe Int] -> Maybe Int
justProduct' [] = Just 1
justProduct' (item : items) = do
  a <- item
  b <- (justProduct' items)
  return (a * b)

lift2 f mx my = f <$> mx <*> my

justProduct'' :: [Maybe Int] -> Maybe Int
justProduct'' items = foldl (lift2 (*)) (Just 1) items

main :: IO ()
main = do
  let lista1 = [Just 1, Just 2, Just 3, Just 4]

  let lista2 = [Just 1, Just 2, Nothing, Just 4]

  print (justProduct lista1)

  print (justProduct' lista1)

  print (justProduct'' lista1)

  print (justProduct lista2)

  print (justProduct' lista2)

  print (justProduct'' lista2)
  